// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	ssr "github.com/quantonganh/ssr"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// ScanService is an autogenerated mock type for the ScanService type
type ScanService struct {
	mock.Mock
}

// CreateScan provides a mock function with given fields: s
func (_m *ScanService) CreateScan(s *ssr.Scan) (*ssr.Scan, error) {
	ret := _m.Called(s)

	var r0 *ssr.Scan
	if rf, ok := ret.Get(0).(func(*ssr.Scan) *ssr.Scan); ok {
		r0 = rf(s)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssr.Scan)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ssr.Scan) error); ok {
		r1 = rf(s)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteScan provides a mock function with given fields: id
func (_m *ScanService) DeleteScan(id uuid.UUID) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetScan provides a mock function with given fields: id
func (_m *ScanService) GetScan(id uuid.UUID) (*ssr.Scan, error) {
	ret := _m.Called(id)

	var r0 *ssr.Scan
	if rf, ok := ret.Get(0).(func(uuid.UUID) *ssr.Scan); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssr.Scan)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListScans provides a mock function with given fields:
func (_m *ScanService) ListScans() ([]*ssr.Scan, error) {
	ret := _m.Called()

	var r0 []*ssr.Scan
	if rf, ok := ret.Get(0).(func() []*ssr.Scan); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ssr.Scan)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateScan provides a mock function with given fields: id, status, findings
func (_m *ScanService) UpdateScan(id uuid.UUID, status ssr.Status, findings ssr.Findings) (*ssr.Scan, error) {
	ret := _m.Called(id, status, findings)

	var r0 *ssr.Scan
	if rf, ok := ret.Get(0).(func(uuid.UUID, ssr.Status, ssr.Findings) *ssr.Scan); ok {
		r0 = rf(id, status, findings)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssr.Scan)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID, ssr.Status, ssr.Findings) error); ok {
		r1 = rf(id, status, findings)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
